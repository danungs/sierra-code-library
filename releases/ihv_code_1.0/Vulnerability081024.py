# ---------------------------------------------------------------------------
#
# Summary : This script is designed to process IHV metrics into Vulnerability score.
#
# Author  : Alexandra Geddes
# Version : Oct 25, 2008
#
# Notes   : Seems to work!
#
#   Still needs:
#       No coding of variable weighting, just hard-wired average
#       Snowmelt threshold
#       Reading from DB:
#           - change BAR and COS names
#       Max/min - just value, not alteration
# ---------------------------------------------------------------------------

# Import system modules
import sys
import win32com.client

# Script Debugging
debug = 0

# Outside data structure
drive_letter = 'C:'
IHV_dir = "C:\Documents and Settings\Alex\My Documents\PhysicalHabitatMetrics\Python\IHV_Bundle"
OutputDB = IHV_dir + '\\IHV_Output\IHV_Output.mdb'

# Loop Arrays
#Basins = ['CAL']
Basins = ['AMR', 'CAL', 'FEA', 'KAW', 'KNG', 'KRN', 'MER', 'MOK', 'SJN', 'STN', 'TUL', 'TUO', 'YUB']

# *** These could all come from a GUI***
# Metrics making up V - MetricName, Statistic used, weighting in final V
# -Duration of summer dry season - Alt of mean
# -Mean annual flow - Alt of Std Dev
# -Recession limb slope - Alt of mean
# -Centroid timing - Alt of mean
# -Ratio of annual maximum and annual minimum values - Alt of mean
VulnMetrics = [['DurBaseFlow', 'Mean', 1.0/len(VulnMetrics), 'DBF'], ['AnnualMean', 'StdDev', 1.0/len(VulnMetrics),'AM'], \
['RecLimbSlope', 'Mean', 1.0/len(VulnMetrics), 'RLS'], ['CentroidTiming', 'Mean', 1.0/len(VulnMetrics), 'CT'], \
['LowVsHigh', 'Mean', 1.0/len(VulnMetrics), 'LH']]
Alterations = ["T00", "A02", "A04", "A06", "A24", "A26", "A46"]

# ----------------------------------------------------------------------------
#   Ping the IHV_Metrics database to get global-average alteration values
# ----------------------------------------------------------------------------
def GetAvgAlts():
    # Returns a list of global averages of alteration values for metrics in VulnMetrics.

    db = 0 # local debug variable
    if (db): print "Starting GetAvgAlts"

    engine = win32com.client.Dispatch("DAO.DBEngine.36")
    myDB = engine.OpenDatabase(OutputDB)

    AvgList = []
    m = 0
    while m < len(VulnMetrics):
        qryAvgs = "SELECT IHV_Metrics.A02 FROM IHV_Metrics "
        qryAvgs += 'WHERE (((IHV_Metrics.Wateryear)="' + VulnMetrics[m][1]
        qryAvgs += '") AND ((IHV_Metrics.Metric)="' + VulnMetrics[m][0] + '"));'

        rs = myDB.OpenRecordset(qryAvgs)
        TotalAlt = 0.0
        NumRecords = 0
        while not rs.EOF:
            try:
                float(str(rs.Fields("A02").Value))
                TotalAlt += float(rs.Fields("A02").Value)
                NumRecords += 1
            except:
                pass
            rs.MoveNext()
        del rs
        AvgList += [TotalAlt/NumRecords]
        m += 1
    return AvgList

# ----------------------------------------------------------------------------
#   Ping the IHV_Metrics database to get list of lists of alteration values
# ----------------------------------------------------------------------------
def GetMetricAlts(BasinName, MetricName, StatType):
    # Returns a list of lists of alteration values.
    # MetricList[Location,Scenario] where Location is e.g. PP-1, Scenarios are A02, A04, and A06

    db = 0 # local debug variable
    if (db): print "Starting GetMetricAlts"

    engine = win32com.client.Dispatch("DAO.DBEngine.36")
    myDB = engine.OpenDatabase(OutputDB)

    qryMetrics = "SELECT IHV_Metrics.Site"
    for Alt in Alterations:
        qryMetrics += ", IHV_Metrics." + Alt
    qryMetrics += " FROM IHV_Metrics "
    qryMetrics += 'WHERE (((IHV_Metrics.Site) Like "' + BasinName + '*") AND '
    qryMetrics += '((IHV_Metrics.Metric)="' + MetricName + '") AND '
    qryMetrics += '((IHV_Metrics.Wateryear)="' + StatType + '"));'

    rs = myDB.OpenRecordset(qryMetrics)
    MetricList = []
    while not rs.EOF:
        AltList = []
        for Alt in Alterations:
            AltList += [str(rs.Fields(Alt).Value)]
        MetricList += [AltList]
        rs.MoveNext()
    del rs
    return MetricList

# ----------------------------------------------------------------------------
#   Write Vulnerability to Database
# ----------------------------------------------------------------------------
def WriteVulnToDB(ValuesList, BasinName, Location, MetricsUsed):
    # Writes a line to the DB table with V for each scenario combination.

    db = 0 # local debug variable

    # connect to database
    conn = odbc.Connection(
        "Driver={Microsoft Access Driver (*.mdb)};Dbq=" + OutputDB + ";Uid=Admin;Pwd=;")
    crs = conn.cursor()

    # Columns in database, as of 7-5-08:
    ColumnList = ['Site', 'MetricsUsed', 'V02', 'V04', 'V06', 'V24', 'V26', 'V46']

    if (db):
        print "Generate list"
    TableList = []
    # Site and MetricsUsed
    if Aggregation =='PP':
        Digits = pp+1
        if Digits<10:
            Digits = '0' + str(Digits)
        else:
            Digits = str(Digits)
        TableList += [Basin+"_"+Digits, MetricsUsed]
    elif Aggregation == 'catchment':
        TableList += [PlaceNames[pp]]

    # Vulnerability values
    TableList += ValuesList

    TableTuple = tuple(TableList) # oops, execute command wants ()

    if db:
        print "TableList:", TableList
        print "ColumnList:", ColumnList

    # Generate SQL command
    SQLString = "insert into IHV_Vulnerability ("
    for col in ColumnList:
        SQLString += col + ","
    SQLString = SQLString[:-1] + ") values (" + "?,"*(len(ColumnList)-1) + "?)"
    if db: print SQLString

    # Write that line
    if db: print "Write line to database table"
    crs.execute(SQLString,TableTuple)

    conn.commit()
    conn.close()

# ----------------------------------------------------------------------------
#   Main - Start program
# ----------------------------------------------------------------------------

print "starting...\n"
try:
    #Ping IHV database for global avg values in A02 for the Metrics used
    AvgAltValues = GetAvgAlts()

    for Basin in Basins:
        print "** Basin:", Basin, '\n'

        # Ping IHV database for metric/alteration values, insert into ValueList
        ValueList = []
        for entry in VulnMetrics:
            # Get Alteration values
            ValueList += [GetMetricAlts(Basin, entry[0], entry[1])] #returns list[scenarios]
            # returns list of lists - ValueList[metric, location, scenario]
            # NB: they are all STRINGS!  This is to accomidate some not-a-number returns
                # 'DurBaseFlow', 'AnnualMean', 'RecLimbSlope', 'CentroidTiming', 'LowVsHigh'
                # (T00, A02, A04, A06, A24, A26, A46)

        # Calculate and write V for each location
        pp = 0
        while pp < len(ValueList[0]):
            # determine which metrics have all values at that location
            MetricIndices = [] # indices of metrics which are working for that location
            MetricCodes = '' # codes of those metrics, to write to database
            m = 0
            while m < len(VulnMetrics):
                try:
                    i = 1 # skip T00
                    while i < len(Alterations):
                        float(ValueList[m][pp][i])
                        i += 1
                    MetricIndices += [m]
                    MetricCodes += VulnMetrics[m][3] + ' '
                except:
                    pass
                m += 1
            MetricCodes = MetricCodes.strip()

            # calculate V values for each alteration combination
            VulnList = []
            i = 1 # skip T00
            while i<len(Alterations):
                Vulnerability = 0 # Vulnerability at that location under that scenario change
                mi = 0
                while mi<len(MetricIndices):
                    Vulnerability += abs(float(ValueList[MetricIndices[mi]][pp][i])/(AvgAltValues[mi]))
                        # abs that metric at that location / global avg of that metric
                    mi += 1
                Vulnerability = Vulnerability/len(MetricIndices)
                    #*** weighting***
                VulnList += [Vulnerability]
                i += 1
                #VulnList[scenario]
            # Write V out to database
            WriteVulnToDB(VulnList, Basin, pp, MetricCodes)
            pp += 1
        
except:
    print sys.exc_info()[1]
    print "Darn.  Aborted."
    
print "end end"
