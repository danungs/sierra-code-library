'''
Created on Aug 2, 2011

@author: nicksantos
'''

import sys, os, string
import arcpy, numpy
import config
from common import *

config.SetUpEnvironment()

args = GetArgs(2) # the number tells it how many args we want. This could probably be implemented with ARGV's length instead

try:
    arcpy.CheckOutExtension("Spatial")
    
except:
    log("Unable to check out spatial analyst - try again later")
    sys.exit()


# TODO: Either finish this function or chuck it    
def RunZonalStats():
    
    #watersheds?
    arcpy.ZonalStatistics_sa(in_zone_data, zone_field, in_value_raster, "MAXIMUM", ignore_nodata)
    


# 1 - Zonal Max
# 2 - Flow Accumulation -> Points
# 3 - Points -> Scott's Code
# 4 - Code -> Parameters
# 5 - Parameters -> Plot


def contrib_area():
    # ---------------------------------------------------------------------------
    #
    # Summary :This script builds a polygon of the contributing watershed area from
    #           a given point and intersects the watershed with WEAP catchments.
    #           This is useful to calculate the proportional flow from WEAP
    #           catchments which can be later summed to calculate the flow at any
    #           given point.
    #
    # Author  : Scott Ligare
    # Created : Feb 18, 2010
    #
    # Notes   : This script was built from a mish mash of examples, including
    #           scripts that were auto-generated by ArcGIS/ModelBuilder, and
    #           other scripts supplied by Josh Viers.
    #
    # Changes :
    #
    #===============================================
    #Import system modules
    from time import *
    
    # Overwrite layers if present (1 = overwrite, 0 = do not overwrite)
    arcpy.env.overwriteOutput = 1
    ##gp.CellSize = 10
    
    # Load required toolboxes...
    #gp.AddToolbox("C:/Program Files/ArcGIS/ArcToolbox/Toolboxes/Analysis Tools.tbx")
    #gp.AddToolbox("C:/Program Files/ArcGIS/ArcToolbox/Toolboxes/Data Management Tools.tbx")
    #gp.AddToolbox("C:/Program Files/ArcGIS/ArcToolbox/Toolboxes/Conversion Tools.tbx")
    #gp.AddToolbox("C:/Program Files/ArcGIS/ArcToolbox/Toolboxes/Spatial Analyst Tools.tbx")
    
    
    # ----------------------------------------------------------------------------
    # ** CHANGE THESE VARIABLES AS NEEDED
    # ----------------------------------------------------------------------------
    # Input / Output Locations
    
    # set watershed variable here
    
    ##wat = 'TUL'
    all_watersheds = ['TUL','AMR_COS','CAL','FEA','KAW','KNG','KRN','MER','MOK','SJN','STN','TUL','TUO','YUB_BAR']
    watersheds = []
    
    #temp - we'll define this better later!
    for watershed in all_watersheds:
        l_wat = watershed() # make a new watershed object
        l_wat.id = watershed # set its id to the code
        watersheds.append(l_wat) # append it to the array of all watersheds
        
    #until we get the logic down...
    wat = watersheds[0].name
    
    #input sample pour points
    # COPY TAKEOUTS.SHP  TO THIS PATH

    sample_points = os.path.join(config.location,wat,"spatial","%sREC/" % wat,"%s_takeouts.shp" % wat)
    
    dem_fdir = os.path.join(config.spatial_data,wat,'%sHYDRO' % wat, '%s5k' % wat,"Layers"'%sfdr' % wat)
    
        try:
            fdir_extent = str(get_raster_property(dem_fdir, "LEFT")) + " " + str(get_raster_property(dem_fdir, "RIGHT")) + " " + str(get_raster_property(dem_fdir, "BOTTOM")) + " " + str(get_raster_property(dem_fdir, "TOP"))
            ##        gp.Extent = fdir_extent
            arcpy.extent = 'MAXOF' # TODO: See what this means
            log("setting extent for raster operations")
        except:
            raise FatalError('no environment - unable to set up extent')
        
        try:
            # gp.CellSize = get_raster_property(dem_fdir, "CellSizeX")
            # gp.CellSize = 'MINOF'
            arcpy.SnapRaster = dem_fdir
            log('set snap raster')
        except:
            raise FatalError('no environment - unable to set cell size')
    
    # input field of id
    sample_field = 'Id'
    # input flow direction grid
    # output shapefile
    output_watshp = os.path.join(config.output,wat+'/'+wat+'REC/'+wat+'_recsheds_test.shp')
    # output workspace
    log('STEP 3 - initialized data paths and variables')
        
    # if Geodatabase, set this value to 0, otherwise 1
    is_input_shapefile = 1
    is_output_shapefile = 1
    
    # Script Debugging -- show progress messages to standard output
    debug = 1
    
    '''----------------------------------------------------------------------------
      Build Watershed
        in_flow_dir: layer flow direction raster
        in_pour_pt: layer pour points
        output_layer: output_layer
    ----------------------------------------------------------------------------'''
    def mk_watershed(in_flow_dir, in_pour_pt, indx):
        try:
            if (debug): print "Creating Watershed"
            output_layer = "wat" + indx
            arcpy.Watershed_sa(in_flow_dir, in_pour_pt, output_layer)
            return output_layer
    
        except:
            print arcpy.AddMessage("Error Building Watershed: " + output_layer)
            sys.exit(0)
       
    
    # ----------------------------------------------------------------------------
    #  Create Single Layer containing only one point
    # ----------------------------------------------------------------------------
    def get_point_layer(feature_layer, fid):
    
        try:
    
            sql = input_field+'='+str(fid)
            arcpy.SelectLayerByAttribute(feature_layer, "NEW_SELECTION", sql)
    
            ws_layer = "ws" + str(fid)
            #if gp.Exists(ws_layer):
            #    gp.Delete_management(ws_layer)
    
            #export_shapefile(feature_layer, ws_layer)
            return ws_layer
        except:
            arcpy.AddMessage("Error creating fire year layer")
            sys.exit(0)
    
    # ----------------------------------------------------------------------------
    #  Use CalculateField to fill in yearly values
    # ----------------------------------------------------------------------------
    def fill_field(datasrc, fieldname, value):
        try:
            if (debug): print "Calculating Field: " + fieldname + " in " + datasrc
            arcpy.CalculateField_management(datasrc, fieldname, value, "VB")
        except:
            print arcpy.AddMessage('CalculateField failure: ' + datasrc)
            sys.exit(0)
    
    # TODO - possibly get rid of this function - it's a wrapper around AddField called add_field.
    
    # ----------------------------------------------------------------------------
    #  Add field to datasource given fieldname and data type
    # ----------------------------------------------------------------------------
    def add_field(datasrc, fieldname, type):
        try:
            if (debug): print "Adding Field: " + fieldname + " to " + datasrc
            arcpy.AddField_management(datasrc, fieldname, type)
        except:
            arcpy.AddMessage("Add field failure: " + fieldname + " to " + datasrc)
            sys.exit(0)
    
    # ----------------------------------------------------------------------------
    #  Dissolve datasource based on fieldname
    # ----------------------------------------------------------------------------
    def dissolve_layer(datasrc, fieldname, indx):
        try:
            if (debug): print "Dissolving Layer: " + fieldname
            ws_layer = "f_ws"+indx
            arcpy.Dissolve_management(datasrc, ws_layer, fieldname, "", "MULTI_PART")
            return (ws_layer + ".shp")
    
        except:
            print gp.AddMessage('Dissolve failure: ' + ws_layer)
            sys.exit(0)
            
            

    # ----------------------------------------------------------------------------
    #   Main - Start program
    # ----------------------------------------------------------------------------
    timeStart = localtime()
    if (debug): print "starting at " + strftime('%a, %d %b %Y %H:%M:%S %Z', timeStart)
    
    config.SetUpEnvironment()
        
    try:
        fl_pts = "pourpts"
        if not arcpy.Exists(fl_pts):
            gp.MakeFeatureLayer(sample_points, fl_pts)
            print 'made feature layer'
    except:
        print 'no layer'
    
        # Create Container to hold all watersheds
    ifcRecs = gp.SearchCursor(sample_points)
    iRecs = ifcRecs.Next()
    while iRecs:
    
    #for i in range(1,count+1):
        i = iRecs.GetValue("Id")
        if (debug): print "Processing Point: " + str(i)
    
        sql = sample_field+' = ' + str(i)
        gp.SelectLayerByAttribute(fl_pts, "NEW_SELECTION", sql)
        if (debug): print "Selected: " + sql
    
        #pt = get_point_layer(f_pour_pts, i)
    
        # Create Watershed
        try:
            ws = mk_watershed(dem_fdir, fl_pts, str(i))
            print 'created watershed ' + str(i)
        except:
            print 'unable to make watershed ' + str(i)
    
        if gp.exists("ws"+str(i)+".shp"):
            gp.delete("ws"+str(i)+".shp")
        f_ws = "ws"+str(i)+".shp"
        try:
            gp.RasterToPolygon_conversion(ws, f_ws, "NO_SIMPLIFY")
            print 'converted to vector ' + str(i)
        except:
            print 'unable to convert to polygon watershed '+ str(i)
        #watershed = multi_to_single(f_ws)
        try:
            watershed = dissolve_layer(f_ws, "GRIDCODE", str(i))
            print 'dissolved ' + str(i)
        except:
            print 'unable to dissolve'
        try:
            add_field(watershed, "SiteNum", "SHORT")
            fill_field(watershed, "SiteNum", i)
            print 'added and calculated field' + str(i)
        except:
            print 'unable to add field or calc' + str(i)
    
        if i == 1001:
            try:
                gp.copyfeatures_management(watershed, output_watshp)
                print 'copied feature' + str(i)
            except:
                print 'unable to copy feature' + str(i)
        else:
            try:
                gp.Append_management(watershed, output_watshp, "NO_TEST")
                print 'appended feature' + str(i)
            except:
                print 'unable to append feature ' + str(i)
        iRecs = ifcRecs.Next()
    print gp.GetMessages()
    
    del gp
    timeEnd = localtime()
    print '______________________________________________________________________'
    print 'process started at: '+ strftime('%a, %d %b %Y %H:%M:%S %Z', timeStart)
    print '  process ended at: '+ strftime('%a, %d %b %Y %H:%M:%S %Z', timeEnd)
